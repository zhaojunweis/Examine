<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.examine.dao.TeacherMapper">

    <resultMap id="teacherBaseMap" type="com.examine.domain.TTeacher">
        <id property="id" column="id"/>
        <result property="tName" column="t_name"/>
        <result property="tRealName" column="t_real_name"/>
        <result property="tPass" column="t_pass"/>
        <result property="tIsAdmin" column="t_is_admin"/>
        <result property="tIsDelete" column="t_is_delete"/>
    </resultMap>
    <resultMap id="studentMapForLimit" type="com.examine.domain.TStudent">
        <id property="id" column="id"/>
        <result property="sSno" column="s_sno"/>
        <result property="sName" column="s_name"/>
        <result property="sClassId" column="s_class_id"/>
        <result property="sScoreId" column="s_score_Id"/>
        <result property="sIsDelete" column="s_is_delete"/>
    </resultMap>
    <resultMap id="examMapForLimit" type="com.examine.domain.TExam">
        <id property="id" column="id"/>
        <result property="examName" column="exam_name"/>
        <result property="examStartTime" column="exam_start_time"/>
        <result property="tName" column="t_name"/>
        <result property="examPaperUrl" column="exam_paper_url"/>
        <result property="isAutoStart" column="is_auto_start"/>
        <result property="isStart" column="is_start"/>
        <result property="isPigeonhole" column="is_pigeonhole"/>
        <result property="isDelete" column="is_delete"/>
        <result property="isFinished" column="is_finished"/>
    </resultMap>

    <resultMap id="teacherBaseShiro" type="com.examine.domain.TTeacher">
        <id property="id" column="id"/>
        <result property="tName" column="t_name"/>
        <result property="tPass" column="t_pass"/>
        <result property="tIsAdmin" column="t_is_admin"/>
        <result property="tIsDelete" column="t_is_delete"/>
        <result property="tRealName" column="t_real_name"/>
        <result property="roleId" column="role_id"/>

        <collection property="role" column="role_id" ofType="com.examine.domain.TRole">
            <id column="role_id" property="roleId"/>
            <result column="role" property="role"/>
            <result column="description" property="description"/>
            <collection property="permSet" ofType="com.examine.domain.TPerm">
                <id column="perm_id" property="permId"/>
                <result column="url" property="url"/>
                <result column="desc" property="desc"/>
            </collection>
        </collection>
    </resultMap>

    <sql id="teacher-shiro-select-base">
         select
          t_teacher.id,
          t_teacher.t_name,
          t_teacher.t_pass,
          t_role.role_id,
          t_role.role,
          t_role.description,
          t_perm.perm_id,
          t_perm.url,
          t_perm.desc
        from
          t_teacher,
          t_role,
          t_role_perm,
          t_perm
        where t_teacher.role_id = t_role.role_id
              and t_role.role_id = t_role_perm.role_id
              and t_role_perm.perm_id = t_perm.perm_id
    </sql>

    <select id="selectTeacherRoleAndPerm" parameterType="String" resultMap="teacherBaseShiro">
        <include refid="teacher-shiro-select-base"/>
        AND
        t_name = #{tName}
    </select>

    <select id="selectTeacherPasswordByUsername" parameterType="String" resultType="String">
        select t_pass from t_teacher where t_name=#{tName}
    </select>

    <select id="selectAdminByLoginMessage" parameterType="String" resultType="String">
        select t_pass from t_teacher where t_name=#{tName} and t_is_admin = 1
    </select>

    <update id="updateAccountByUsername" parameterType="Map">
        update
        t_teacher
        <set>
            <if test="tName != null">
                t_name = #{tName},
            </if>
            <if test="tPass != null">
                t_pass = #{tPass},
            </if>
            <if test="tIsAdmin != null">
                t_is_admin = #{tIsAdmin}
            </if>
        </set>
        where
        t_name = #{tName}
    </update>

    <insert id="saveTeacher" parameterType="com.examine.domain.TTeacher"
            useGeneratedKeys="true" keyProperty="id">
        insert
        into t_teacher(
           t_name,
           t_real_name,
           t_pass,
           t_is_admin
        ) values (
           #{tName},
           #{tRealName},
           #{tPass},
           #{tIsAdmin}
        )
    </insert>

    <delete id="removeTeacherById" parameterType="Integer">
        delete from t_teacher where id=#{id}
    </delete>

    <select id="selectAllTeacher" resultMap="teacherBaseMap">
        select * from t_teacher where t_is_delete = 0
    </select>

    <select id="selectIsPigeonhole" parameterType="Integer" resultType="Integer">
        select is_pigeonhole from t_exam where id = #{id}
    </select>

    <select id="selectCountOtherAdminExceptAdmin" resultType="Integer">
        select count(*) from t_teacher where t_is_delete = 0 and t_name != 'admin' and t_is_admin = 1
    </select>

    <select id="selectTeacherById" resultMap="teacherBaseMap" parameterType="Integer">
        select * from t_teacher where id = #{id} and t_is_delete = 0;
    </select>

    <select id="selectTeacherEntityByUsername" resultMap="teacherBaseMap" parameterType="String">
        select * from t_teacher where t_name = #{tName} and t_is_delete = 0;
    </select>

    <update id="updateTeacherById" parameterType="com.examine.domain.TTeacher">
        update
        t_teacher
        <set>
            <if test="tName != null">
                t_name = #{tName},
            </if>
            <if test="tRealName != null">
                t_real_name = #{tRealName},
            </if>
            <if test="tPass != null">
                t_pass = #{tPass},
            </if>
            <if test="tIsAdmin != null">
                t_is_admin = #{tIsAdmin},
            </if>

            <if test="tIsDelete != null">
                t_is_delete = #{tIsDelete}
            </if>
        </set>

        where id = #{id}
    </update>
    <!--分页查询-->
    <!--先查询出该场考试Id对应多少学生-->
    <select id="selectCountByExamId" parameterType="Integer" resultType="Integer">
        select count(*) from t_student where s_score_Id = #{examId} and s_is_delete = 0
    </select>
    <!--查询出每页limit startNum,pageSize对应的数据-->
    <select id="selectByLimit" parameterType="Map" resultMap="studentMapForLimit">
        select * from t_student where s_score_Id = #{examId} limit #{startNum},#{pageSize}
    </select>
    <!--查询教师对应的考前考试数量-->
    <select id="selectCountExamBefore" parameterType="String" resultType="Integer">
        select count(*) from  t_exam  where t_name = #{tname} and is_start = 0 and is_finished = 0 and is_delete = 0
    </select>
    <!--查询教师对应的考后考试数量-->
    <select id="selectCountExamAfter" parameterType="String" resultType="Integer">
        select count(*) from  t_exam  where t_name = #{tname} and is_start = 0 and is_finished = 1
    </select>
    <!--考前靠后操作的分頁，傳入tname,startnum,pagesize-->
    <select id="selectExamLimitBefore" parameterType="Map" resultMap="examMapForLimit">
        select * from t_exam
        where  t_name = #{tname} and is_start = 0 and is_finished = 0 and is_delete = 0 limit #{startNum},#{pageSize}
    </select>
    <select id="selectExamLimitAfter" parameterType="Map" resultMap="examMapForLimit">
        select * from t_exam
        where  t_name = #{tname} and is_start = 0 and is_finished = 1  limit #{startNum},#{pageSize}
    </select>
    <!--&lt;!&ndash;靠后操作的分頁，傳入tname,startnum,pagesize&ndash;&gt;
    <select id="selectExamLimit" parameterType="Map" resultMap="examMapForLimit">
        select * from t_exam where t_name = #{tname} and is_start = 0 and is_finished = 1  limit #{startNum},#{pageSize}
    </select>-->
</mapper>
